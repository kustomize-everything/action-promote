---
name: Image Promotion
description: Promote a tagged image to a deployment repo using Kustomize and Git
inputs:
  git-commit-user:
    description: Name to add to the Git Commit Message
    required: false
    default: Kustomize Everything
  git-commit-email:
    description: Email to add to the Git Commit Message
    required: false
    default: kustomize-everything@users.noreply.github.com
  git-commit-message:
    description: Commit message to use for deployment
    required: false
  github-token:
    description: |
      GitHub token for either opening pull requests or fetching metadata about
      what is being promoted.
    required: true
  images:
    description: |
      A JSON list of images to promote. Each list item should be a dictionary
      with the following keys:
        - name: The name of the image in the target repository to update
        - name_tag: The image name:tag to promote
        - env: The env that this image should be promoted in
  promotion-method:
    description: |
      How to handle the promotion. pull_request opens a PR against the
      repository, ensures that all checks pass on the PR, and then
      self-merges the PR. push will push the changes directly to the target
      branch.
    required: false
    default: push
  sha256-checksum:
    description: Checksum of Kustomize version
    required: false
    default: bba81aa61dba057db1d5abeddf1e522b568b2d906ab67a5c80935e97302c8773
  ssh-key:
    description: |
      SSH key for doing the promotion into the deployment repository.
      REMEMBER TO USE A GITHUB SECRET FOR THIS.
    required: true
  target-repo:
    description: The repo where the image promotion should be pushed
    required: true
  target-branch:
    description: |
      The branch where the image promotion should be pushed (defaults to main)
    default: main
    required: false
  version:
    description: Version of Kustomize to use
    required: false
    default: 4.5.5
  working-directory:
    description: |
      Working directory where the deployment repo should be checked out into
    required: false
    default: image-promotion
  dry-run:
    description: |
      If true, the action will not actually do anything. This is useful for
      testing the action.
    default: false
outputs:
  deployment-repo-sha:
    description: "Git SHA of promotion commit on deployment repo"
    value: ${{ steps.commit-changes.outputs.deployment-repo-sha }}
  deployment-repo-sha-url:
    description: "Github URL for the promotion commit on the deployment URL"
    value: ${{ steps.commit-changes.outputs.deployment-repo-sha-url }}
  deployment-repo-sha-short:
    description: "Git short SHA of promotion commit on deployment repo."
    value: ${{ steps.commit-changes.outputs.deployment-repo-sha-short }}
  images-updated:
    description: "List of image name:tags that were promoted"
    value: ${{ steps.update-image-tag.outputs.images }}

runs:
  using: composite
  steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.target-repo }}
        ref: ${{ inputs.target-branch }}
        ssh-key: ${{ inputs.ssh-key }}
        token: ${{ inputs.github-token }}
        path: ${{ inputs.working-directory }}

    - name: GitHub Metadata
      uses: kustomize-everything/action-github-metadata@v1.0.0

    - name: Kustomize Setup
      uses: kustomize-everything/action-kustomize@v2.0.2
      with:
        version: ${{ inputs.version }}
        sha256-checksum: ${{ inputs.sha256-checksum }}

    - name: Python Setup
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Set Git Author
      shell: bash
      run: |
        git config --global user.name ${{ inputs.git-commit-user }}
        git config --global user.email ${{ inputs.git-commit-email }}

    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash

    - name: Use update all images provided
      id: update-images
      shell: bash
      env:
        IMAGES_TO_UPDATE: ${{ inputs.images }}
        DEPLOYMENT_DIR: ${{ inputs.working-directory }}
      run: |
        python ${{ github.action_path }}/update-images.py > images.json
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "images-json<<$EOF" >> $GITHUB_OUTPUT
        cat images.json >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT
        echo "images=$(jq -c -r '.[] | .name' < images.json | xargs)" >> $GITHUB_OUTPUT

    - name: Commit Changes
      id: commit-changes
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        IMAGES: ${{ steps.update-images.outputs.images }}
        IMAGES_JSON: ${{ steps.update-images.outputs.images-json }}
        ENV_DIR: ${{ inputs.env-dir }}
        TARGET_BRANCH: ${{ inputs.target-branch }}
        TARGET_REPO: ${{ inputs.target-repo }}
        DRY_RUN: ${{ inputs.dry-run }}
        PROMOTION_METHOD: ${{ inputs.promotion-method }}
      run: |
        # If there are no changes, then we don't need to do anything
        if [[ -z "$(git status --porcelain)" ]]; then
          echo "No changes to commit"
          exit 0
        # Otherwise, we need to commit the changes with the relevant metadata
        # in the commit message.
        else
           ${{ github.action_path }}/commit-and-pull-request.sh
        fi
