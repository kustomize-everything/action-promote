---
name: Image Promotion
description: Promote a tagged image to a deployment repo using Kustomize and Git
inputs:
  git-commit-user:
    description: Name to add to the Git Commit Message
    required: false
    default: Kustomize Everything
  git-commit-email:
    description: Email to add to the Git Commit Message
    required: false
    default: kustomize-everything@users.noreply.github.com
  git-commit-message:
    description: Commit message to use for deployment
    required: false
  github-token:
    description: GitHub token for either opening pull requests or fetching metadata about what is being promoted.
    required: true
  image-name:
    description: The name of the image
    required: false
  image-tag:
    description: The tag to promote
    required: false
  image-name-tag:
    description: The image name:tag to promote
    required: false
  image-additional-tags:
    description: Additional tags
    default: None
    required: false
  promotion-method:
    description: "How to handle the promotion. pull_request opens a PR against the repository, ensures that all checks pass on the PR, and then self-merges the PR. push will push the changes directly to the target branch."
    required: false
    default: push
  sha256-checksum:
    description: Checksum of Kustomize version
    required: false
    default: bba81aa61dba057db1d5abeddf1e522b568b2d906ab67a5c80935e97302c8773
  ssh-key:
    description: SSH key for doing the promotion into the deployment repository. REMEMBER TO USE A GITHUB SECRET FOR THIS.
    required: true
  target-repo:
    description: The repo where the image promotion should be pushed
    required: true
  target-branch:
    description: The branch where the image promotion should be pushed (defaults to
      main)
    default: main
    required: false
  target-dir:
    description: The directory where the kustomize.yaml to update is located in the
      target-repo
    required: true
  version:
    description: Version of Kustomize to use
    required: false
    default: 4.5.5
  working-directory:
    description: Working directory where the deployment repo should be checked out into
    required: false
    default: image-promotion
outputs:
  deployment-repo-sha:
    description: "Git SHA of promotion commit on deployment repo"
    value: ${{ steps.update-image-tag.outputs.deployment-repo-sha }}
  deployment-repo-sha-url:
    description: "Github URL for the promotion commit on the deployment URL"
    value: ${{ steps.update-image-tag.outputs.deployment-repo-sha-url }}
  deployment-repo-sha-short:
    description: "Git short SHA of promotion commit on deployment repo."
    value: ${{ steps.update-image-tag.outputs.deployment-repo-sha-short }}
  image-name-tag:
    description: "Combined image name:tag that was promoted"
    value: ${{ steps.update-image-tag.outputs.image-name-tag }}
  image-tags:
    description: "Additional tags that were provided"
    value: ${{ steps.update-image-tag.outputs.image-additional-tags }}

runs:
  using: composite
  steps:
    - name: Checkout Repo
      uses: actions/checkout@v2
      with:
        repository: ${{ inputs.target-repo }}
        ref: ${{ inputs.target-branch }}
        ssh-key: ${{ inputs.ssh-key }}
        path: ${{ inputs.working-directory }}

    - name: GitHub Metadata
      uses: kustomize-everything/action-github-metadata@v1.0.0

    - name: Kustomize Setup
      uses: kustomize-everything/action-kustomize@v1.0.4
      with:
        version: ${{ inputs.version }}
        sha256-checksum: ${{ inputs.sha256-checksum }}

    - name: Set Git Author
      shell: bash
      run: |
        git config --global user.name ${{ inputs.git-commit-user }}
        git config --global user.email ${{ inputs.git-commit-email }}

    - name: Update Image Tag in Base
      id: update-image-tag
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        IMAGE_ADDITIONAL_TAGS: ${{inputs.image-additional-tags}}
        IMAGE_NAME_TAG: ${{inputs.image-name-tag}}
        IMAGE_NAME: ${{inputs.image-name}}
        IMAGE_TAG: ${{inputs.image-tag}}
        PROMOTION_METHOD: ${{ inputs.promotion-method }}
        TARGET_BRANCH: ${{ inputs.target-branch }}
        TARGET_DIR: ${{ inputs.target-dir }}
        TARGET_REPO: ${{ inputs.target-repo }}
      run: |-
        if [[ "${IMAGE_NAME}" && "${IMAGE_TAG}" ]]; then
          IMAGE_NAME_TAG="${IMAGE_NAME}:${IMAGE_TAG}"
        elif [[ "${IMAGE_NAME_TAG}" ]]; then
          echo "Using provided image-name-tag ${IMAGE_NAME_TAG}."
        else
          echo "No image was specified for promotion. You must provide one of the following inputs to the action:"
          echo "- image-name and image-tag e.g. image-name = nginx and image-tag = 1.0.0"
          echo "- image-name-tag e.g image-name-tag = nginx:1.0.0"
          exit 1
        fi

        IMAGE_ID="${IMAGE_NAME_TAG}"

        cd "${TARGET_DIR}"
        TITLE="Promote ${IMAGE_ID} to ${TARGET_DIR}"
        METADATA="---
        GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}
        GITHUB_JOB: ${GITHUB_JOB}
        GITHUB_REF_URL: ${GITHUB_REF_URL}
        GITHUB_REF: ${GITHUB_REF}
        GITHUB_REPOSITORY_URL: ${GITHUB_REPOSITORY_URL}
        GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}
        GITHUB_RUN_ID: ${GITHUB_RUN_ID}
        GITHUB_RUN_NUMBER: ${GITHUB_RUN_NUMBER}
        GITHUB_SHA_URL: ${GITHUB_SHA_URL}
        GITHUB_SHA: ${GITHUB_SHA}
        GITHUB_WORKFLOW_RUN_URL: ${GITHUB_WORKFLOW_RUN_URL}"
        IMAGE_NAME_TAG: ${IMAGE_NAME_TAG}
        IMAGE_TAGS: ${{ inputs.image-additional-tags }}

        if [[ "${PROMOTION_METHOD}" == "pull_request" ]]; then
          BRANCH=promotion/${GITHUB_REPOSITORY}/${TARGET_BRANCH}/${TARGET_DIR}}/${IMAGE_NAME}/${IMAGE_TAG}
          git checkout -B ${BRANCH}
          kustomize edit set image ${IMAGE_NAME_TAG}
          git add .
          git commit -m "${TITLE}

          ${METADATA}
          "
          git show
          git push origin ${BRANCH} -f
          set +e
          PR="$(gh pr view 2>&1)"
          set -e
          if [[ "${PR}" =~ "no pull requests found" ]]; then
            gh pr create --fill
          else
            echo "PR Already exists:"
            gh pr view
          fi
          CHECKS_DONE=""
          while [[ "${CHECKS_DONE}" != "true" ]]; do
            set +e
            CHECK_RESULTS="$(gh pr checks 2>&1)"
            set -e
            WAITING_PATTERN="no checks reported"
            if [[ "${CHECK_RESULTS}" =~ "${WAITING_PATTERN}" ]]; then
              echo "Waiting for status checks to start..."
              sleep 5
            else
              CHECKS_DONE="true"
            fi
          done
          echo
          echo "Waiting for status checks to complete..."
          gh pr checks --watch
          echo
          echo "Status checks have all passed. Merging PR..."
          gh pr merge --squash --admin
          echo
          echo "Promotion PR has been merged. Details below."
          gh pr view
        elif [[ "${PROMOTION_METHOD}" == "push" ]]; then
          kustomize edit set image ${IMAGE_NAME_TAG}
          git add .
          git commit -m "${TITLE}

          ${METADATA}
          "
          git show
          git push origin ${TARGET_BRANCH}
          echo
          echo "Image ${IMAGE_NAME_TAG} has been promoted to ${TARGET_REPO} on branch ${TARGET_BRANCH} in directory ${TARGET_DIR}."
          echo
          DEPLOYMENT_REPO_SHA_URL="$(gh browse -c -n -R ${TARGET_REPO})"
          echo "${DEPLOYMENT_REPO_SHA_URL}"
        else
          echo "Unknown promotion method: ${PROMOTION_METHOD}. Valid methods are pull_request and push."
          exit 1
        fi

        # Set outputs so that downstream steps can consume this data
        echo "::set-output deployment-repo-sha-short=$(git rev-parse --short HEAD)"
        echo "::set-output deployment-repo-sha-url=${DEPLOYMENT_REPO_SHA_URL}"
        echo "::set-output deployment-repo-sha=$(git rev-parse HEAD)"
        echo "::set-output image-additional-tags=${IMAGE_ADDITIONAL_TAGS}"
        echo "::set-output image-name-tag=${IMAGE_NAME_TAG}"
